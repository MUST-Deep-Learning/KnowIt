KnowIt.setup.import_custom_arch
===============================

.. py:module:: KnowIt.setup.import_custom_arch

.. autoapi-nested-parse::

   Functions used to import custom architectures.



Functions
---------

.. autoapisummary::

   KnowIt.setup.import_custom_arch.import_custom_arch
   KnowIt.setup.import_custom_arch.complies


Module Contents
---------------

.. py:function:: import_custom_arch(path, exp_output_dir, safe_mode)

   Imports a custom architecture file, validates its extension, and copies it
   to a specified directory if it complies with given criteria.

   :Parameters: * **path** (:py:class:`str`) -- The file path of the custom architecture script. Must end with '.py'.
                * **exp_output_dir** (:py:class:`str`) -- The directory where the custom architecture file will be saved if valid.
                * **safe_mode** (:py:class:`bool`) -- Flag indicating whether to overwrite existing files in the target directory.

   :rtype: :py:obj:`None`

   :raises SystemExit: If `path` does not end with '.py' or if copying fails.
   :raises Logs:
   :raises ----:
   :raises - Logs an error if the file path does not end with ``'.py'``:py:class:`.`:
   :raises - Logs the successful import` of :py:class:`the custom architecture.:

   .. rubric:: Notes

   - This function assumes the existence of external functions `complies`,
     `custom_arch_path`, and `safe_copy` to verify, format the file path,
     and handle file copying with overwrite safety.


.. py:function:: complies(path)

   Validates a custom model architecture by importing the file and performing compliance checks.

   This function dynamically loads a Python file specified by `path` and verifies that it meets
   specific criteria for compatibility with KnowIt. The checks include inheritance, method
   definitions, attribute presence, and argument requirements.

   :Parameters: **path** (:py:class:`str`) -- The path to the Python file containing the custom architecture definition.

   :returns: True if the custom architecture file passes all compliance checks.
   :rtype: :py:class:`bool`

   :raises SystemExit: If the custom architecture does not meet any of the required compliance criteria.

   .. rubric:: Notes

   - Class Inheritance: The file must contain a class `Model` that inherits from `torch.nn.Module`.
   - Method Presence: The `Model` class must define a `forward()` method.
   - Metadata: The file must contain:
       - `available_tasks`: a list indicating the supported tasks for the model.
       - `HP_ranges_dict`: a dictionary defining the hyperparameter ranges for the model.
   - Constructor Arguments:
       - `__init__` of `Model` must accept specific arguments: `task_name`, `input_dim`, `output_dim`.
       - `HP_ranges_dict` must include all arguments in `__init__` except `task_name`, `input_dim`,
         `output_dim`, and `self`.
   - Default Values: `__init__` must define default values for any optional arguments.
   - Forward Arguments: The `forward()` method must accept exactly two arguments, one of which must
     be `self`.


