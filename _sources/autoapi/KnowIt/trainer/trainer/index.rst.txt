KnowIt.trainer.trainer
======================

.. py:module:: KnowIt.trainer.trainer

.. autoapi-nested-parse::

   ---------------
   KITrainer
   ---------------

   The "KITrainer" is a context class that that interacts with the overall
   Knowit architecture script (which, in turn, interacts with all of KnowIt's sub-
   modules).

   The user is able to use the KnowIt Trainer in different ways, depending on the
   training task. As such, the trainer submodule is built similar to a `State'
   pattern.

   Thus, there are three parts to the submodule: the context class (KITrainer)
   that Knowit directly interacts with, an abstract class (BaseTrainer) that
   interfaces the context class with a concrete trainer state, and a set of
   trainer state classes.

   The three possible concrete states are:
       - STATE 1 (NEW): Train a new model from scratch.
       - STATE 2 (CONTINUE): Continue training an existing model from checkpoint.
       - STATE 3 (EVAL): Load a trained model and evaluate it on a dataset.

   KnowIt's Trainer module is built using Pytorch Lightning. See here:
   https://lightning.ai/pytorch-lightning



Classes
-------

.. autoapisummary::

   KnowIt.trainer.trainer.KITrainer


Module Contents
---------------

.. py:class:: KITrainer(state, base_trainer_kwargs, optional_pl_kwargs, ckpt_file = None, *, train_flag = 'train')

   Context class that interacts with KnowIt.

   The class interacts with the overall KnowIt architecture script. Based on
   the user's training task, it will point to the correct Trainer state.

   :Parameters: * **state** (:py:class:`type[Any]`) -- A concrete state that corresponds to one of the possible states for
                  the trainer.
                * **base_trainer_kwargs** (:py:class:`dict[str`, :py:class:`Any]`) -- The kwargs required in the BaseTrainer submodule.
                * **optional_pl_kwargs** (:py:class:`dict[str`, :py:class:`Any]`) -- An additional kwargs that a user would like to provide Pytorch
                  Lightning's Trainer.
                * **ckpt_file** (:py:class:`None | str`, *default* :py:obj:`None`) -- A string that points to a Pytorch checkpoint file. Required for
                  certain trainer states.
                * **train_flag** (:py:class:`str`, *default* ``'train'``) -- An additional flag to indicate whether the Trainer is in a train
                  state or an evaluate only state. Options= "train", "train_from_ckpt",
                  or "evaluate_only".

   :ivar _state: The current state that the Trainer is initialized in.

   :vartype _state: :py:class:`None | type[Any]`, *default* :py:obj:`None`


   .. py:method:: fit(dataloaders)

      Fit model to training data.

      :Parameters: **dataloaders tuple[DataLoader[Any], DataLoader[Any], DataLoader[Any]]** -- The Pytorch dataloaders that has been set up in KnowIt's
                   datamodule. The triplet corresponds to the train, val, and eval
                   dataloaders.



   .. py:method:: evaluate_fitted_model(dataloaders)

      Evaluate a trained model from checkpoint on a user's data.

      :Parameters: **dataloaders tuple[DataLoader[Any], DataLoader[Any], DataLoader[Any]]** -- The Pytorch dataloaders that has been set up in KnowIt's
                   datamodule. The triplet corresponds to the train, val, and eval
                   dataloaders.



