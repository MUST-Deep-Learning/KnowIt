trainer_states
==============

.. py:module:: trainer_states

.. autoapi-nested-parse::

   -------------
   TrainerStates
   -------------

   There are three states that a user can initialize KnowIt's Trainer in. They are
   as follows:

       STATE 1 (NEW): Train a new model from scratch.

           Class: TrainNew
               Fits a model to a training set and evaluates the model on a valid-
               ation set and evaluation set. During training, metrics are logged
               and a checkpoint file is saved (only if 'mute_logger' is False) in
               the user's model output directory.

       STATE 2 (CONTINUE): Continue training an existing model from checkpoint.

           Class: ContinueTraining
               Initializes a pretrained model from a checkpoint file. Fits the
               initialized model to a training set and evaluates the model on a
               validation set and evaluation set. During training, metrics are
               logged and a checkpoint file is saved (only if 'mute_logger' is
               False) in the user's model output directory.

       STATE 3 (EVAL): Continue training an existing model from checkpoint.

           Class: EvaluateOnly
               Initializes a pretrained model from a checkpoint file. Evaluates
               the model on a validation set and evaluation set.

   In the case that the above states are inadequate for a user's task, the module
   also contains an example template class "CustomTrainer" that a user can edit.



Classes
-------

.. autoapisummary::

   trainer_states.TrainNew
   trainer_states.ContinueTraining
   trainer_states.EvaluateOnly
   trainer_states.CustomTrainer


Module Contents
---------------

.. py:class:: TrainNew(base_kwargs: dict[str, Any], optional_pl_kwargs: dict[str, Any])

   Bases: :py:obj:`trainer.base_trainer.BaseTrainer`


   Fit a model to a training dataset and evaluate on val/eval sets.

   Args:
   ----
       BaseTrainer (type):         Abstract class that stores user parameters
                                   and defines abstract methods.



   .. py:method:: fit_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None

      Fit model to the training data and monitor metrics on val set.

      Args:
      ----
          dataloaders (tuple):    The triplet containing the train
                                  dataloader and validation dataloader. The
                                  ordering of the tuple must be given as
                                  (train, val, eval).




   .. py:method:: evaluate_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None

      Evaluate the trained model's performance on a tuple of data sets.

      NOTE: If the concatenated strings for metrics become long, Pytorch
      Lightning will print the evaluation results on two seperate lines in
      the terminal.

      Args:
      ----
          dataloaders (tuple):        A tuple consisting of three Pytorch
                                      dataloaders (train, val, eval).




   .. py:method:: _prepare_pl_model() -> None


   .. py:method:: _prepare_pl_trainer(optional_pl_kwargs: dict[str, Any]) -> None


   .. py:method:: _save_model_state() -> pytorch_lightning.callbacks.ModelCheckpoint


.. py:class:: ContinueTraining(to_ckpt: str, base_kwargs: dict[str, Any], optional_pl_kwargs: dict[str, Any])

   Bases: :py:obj:`trainer.base_trainer.BaseTrainer`


   Fit a pretrained model to a training set and evaluate on val/eval sets.

   Args:
   ----
       BaseTrainer (type):         Abstract class that stores user parameters
                                   and defines abstract methods.



   .. py:method:: fit_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None

      Fit model to the training data and monitor metrics on val set.

      Args:
      ----
          dataloaders (tuple):    The triplet containing the train
                                  dataloader and validation dataloader. The
                                  ordering of the tuple must be given as
                                  (train, val, eval).




   .. py:method:: evaluate_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None

      Evaluate the trained model's performance on a tuple of data sets.

      NOTE: If the concatenated strings for metrics become long, Pytorch
      Lightning will print the evaluation results on two seperate lines in
      the terminal.

      Args:
      ----
          dataloaders (tuple):        A tuple consisting of three Pytorch
                                      dataloaders (train, val, eval).




   .. py:method:: _prepare_pl_model() -> None


   .. py:method:: _prepare_pl_trainer(optional_pl_kwargs: dict[str, Any]) -> None


   .. py:method:: _save_model_state() -> pytorch_lightning.callbacks.ModelCheckpoint


.. py:class:: EvaluateOnly(to_ckpt: str)

   Bases: :py:obj:`trainer.base_trainer.BaseTrainer`


   Evaluate a trained model on a dataset.

   Args:
   ----
       BaseTrainer (type):         Abstract class that stores user parameters
                                   and defines abstract methods.



   .. py:method:: fit_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None

      Fit model to the training data and monitor metrics on val set.

      Args:
      ----
          dataloaders (tuple):    The train dataloader and validation
                                  dataloader. The ordering of the tuple
                                  must be given is (train, val).




   .. py:method:: evaluate_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None

      Evaluate the trained model's performance on a tuple of data sets.

      NOTE: If the concatenated strings for metrics become long, Pytorch
      Lightning will print the evaluation results on two seperate lines in
      the terminal.

      Args:
      ----
          dataloaders (tuple):        A tuple consisting of three Pytorch
                                      dataloaders (train, val, eval).




   .. py:method:: _prepare_pl_model() -> None


   .. py:method:: _prepare_pl_trainer(optional_pl_kwargs: dict[str, Any]) -> None


   .. py:method:: _save_model_state() -> None


.. py:class:: CustomTrainer(base_kwargs: dict[str, Any], optional_pl_kwargs: dict[str, Any])

   Bases: :py:obj:`trainer.base_trainer.BaseTrainer`


   A template KnowIt trainer state.

   The template can be edited by a user to create a custom trainer state.

   Args:
   ----
       BaseTrainer (type):         Abstract class that stores user parameters
                                       and defines abstract methods.



   .. py:method:: fit_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None


   .. py:method:: evaluate_model(dataloaders: tuple[torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any], torch.utils.data.dataloader.DataLoader[Any]]) -> None


   .. py:method:: _prepare_pl_model() -> None


   .. py:method:: _prepare_pl_trainer(optional_pl_kwargs: dict[str, Any]) -> None


   .. py:method:: custom_method()


   .. py:method:: _save_model_state() -> pytorch_lightning.callbacks.ModelCheckpoint


