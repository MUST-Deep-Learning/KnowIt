fetch_torch_mods
================

.. py:module:: fetch_torch_mods


Attributes
----------

.. autoapisummary::

   fetch_torch_mods.__author__
   fetch_torch_mods.__description__


Functions
---------

.. autoapisummary::

   fetch_torch_mods.get_loss_function
   fetch_torch_mods.get_performance_metric
   fetch_torch_mods.get_optim
   fetch_torch_mods.get_lr_scheduler
   fetch_torch_mods.prepare_function


Module Contents
---------------

.. py:data:: __author__
   :value: 'randlerabe@gmail.com'


.. py:data:: __description__
   :value: "Helper functions used in KnowIt's trainer module."


.. py:function:: get_loss_function(loss: str) -> Callable[Ellipsis, float | torch.Tensor]

   Return user's choice of loss function.

   A helper method to retrieve the user's choice of loss function. The loss
   function name must be the functional version from Pytorch's torch.nn
   module.

   Args:
   ----
       loss (str):         The loss function as specified in
                           torch.nn.functional.

   Returns:
   -------
       (Callable):         A Pytorch loss function. Takes as input either
                           two integers/floats and an optional dictionary of
                           kwargs. Returns an integer/float value.



.. py:function:: get_performance_metric(metric: str) -> Callable[Ellipsis, float | torch.Tensor]

   Return user's choice of performance metrics.

   A helper method to retrieve the user's choice of performance metrics. The
   metrics is the functional version from torchmetrics.

   Args:
   ----
       metric (str):       The metric as specified in Torchmetrics. The metric
                           name must be the functional version.

   Returns:
   -------
       (Callable):         A Torchmetrics metric function. Takes as input
                           either two integers/floats and an optional
                           dictionary of kwargs. Returns an integer/float
                           value.



.. py:function:: get_optim(optimizer: str) -> type[tuple[Callable[[], Iterator[bool]], float, None | dict[str, Any]]]

   Return user's choice of optimizer.

   A helper method to retrieve the user's choice of optimizer.

   Args:
   ----
       optimizer (str):    The optimizer as specified in torch.optim.

   Returns:
   -------
       (type):             An uninitialized Pytorch optimizer. Takes as input
                           the model class' parameters method, the learning
                           rate, and an optional dictionary of kwargs.



.. py:function:: get_lr_scheduler(scheduler: str) -> type[tuple[type, float, None | dict[str, Any]]]

   Return user's choice of learning rate scheduler.

   A helper method to retrieve the user's choice of learning rate scheduler.

   Args:
   ----
       scheduler (str):    The scheduler as specified in torch.optim.

   Returns:
   -------
       (type):             An uninitialized Pytorch learning rate scheduler.
                           Takes as input a Pytorch optimizer object and an
                           optional dictionary of kwargs.



.. py:function:: prepare_function(user_args: str | dict[str, Any], *, is_loss: bool) -> dict[str, Callable[Ellipsis, float | torch.Tensor]]

   Set up and return a user's choice of function.

   Unpacks user_args and fetches the correct functions with any kwargs.
   This is only performed once during the training run.

   Returns
   -------
       functions (dict):   A prepared function suitable for a task in the
                           trainer module.



